<?xml version="1.0"?>
<!-- Copyright (c) 2005-2007 Pearl Crescent, LLC.  All Rights Reserved.
  -->
<!-- vim: set sw=2 sts=2 ts=8 et syntax=xml: -->

<?xml-stylesheet href="chrome://global/skin/global.css"?>
<?xml-stylesheet href="chrome://mozapps/content/preferences/preferences.css"?>
<?xml-stylesheet href="chrome://browser/skin/preferences/preferences.css"?>
<?xml-stylesheet href="chrome://pagesaver/skin/preferences.css"?>

<?xul-overlay href="chrome://global/content/dialogOverlay.xul"?>

<!DOCTYPE window SYSTEM "chrome://pagesaver/locale/extension.dtd">

<window title="&PearlCrescentPageSaver.label;"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        screenX="50"
        screenY="50"
        persist="screenX screenY"
        style="&PageSaverPrefWindow.style;"
        class="windowDialog"
        onload="doInitialize();">

  <script type="application/x-javascript" src="chrome://global/content/nsUserSettings.js"/>
  <script type="application/x-javascript" src="chrome://pagesaver/content/keyutil.js"/>
  <script type="application/x-javascript" src="chrome://pagesaver/content/util.js"/>

  <script type="application/x-javascript">
    <![CDATA[

      const kPNGOptionNoTransparency = "transparency=none";
      const kPNGOptionsDefaultValue = kPNGOptionNoTransparency;
      const kJPEGOptionQualityPrefix = "quality=";
      const kJPEGDefaultQuality = 50;
      const kFileNameDefaultValue = "%t";
      const kSamplePageTitle = GetLocalizedString("SAMPLE_PAGE_TITLE");
      const kSamplePageURL = GetLocalizedString("SAMPLE_PAGE_URL");
      const kSampleID = GetLocalizedString("SAMPLE_ELEMENT_ID");
      const kHaveImageFormatOptions = PageSaverHaveToDataURL(null);


      var gPrimaryShortCut = { key: "", modifiers: "", friendly: ""};
      var gCurrentImageFormat = kPearlContentTypePNG;

      function doInitialize()
      {
        doSetOKCancel(onOKButton, onCancelButton, null, null);
        var savedAreaElem = document.getElementById("savedarea");
        if (savedAreaElem)
        {
          var portion = nsPreferences.getIntPref(kPrefPortion, kPortionEntire);
          var elemName = "savedarea-"
                         + (portion == kPortionEntire ? "entire" : "visible");
          savedAreaElem.selectedItem = document.getElementById(elemName);
        }

        gCurrentImageFormat = nsPreferences.getLocalizedUnicharPref(
                                       kPrefImageFormat, kPearlContentTypePNG);

        var elem = document.getElementById("fileName");
        if (elem)
        {
          elem.value = nsPreferences.getLocalizedUnicharPref(kPrefFileName,
                                                        kFileNameDefaultValue);
          // Populate sample file name.  Uses gCurrentImageFormat.
          onFormattedTextInput(elem);
        }
        addLegend("fileName-legend");

        /*
         * Set input and sample field width to match the row they are in.
         * This prevents the sample fileName from growing too wide.
         */
        setElementWidthToContainer("fileName-row", "fileName-sample");
        setElementWidthToContainer("fileName-row", "fileName");


        elem = document.getElementById("promptBeforeSaving");
        if (elem)
        {
          elem.checked = nsPreferences.getBoolPref(kPrefFileDoPrompt, true);
          onPromptCheckboxChange(null);
          elem.addEventListener("CheckboxStateChange", onPromptCheckboxChange,
                                false);
        }

        setCheckboxFromPref("overwriteFile", kPrefFileOverwrite, false);

        var imageSizeElem = document.getElementById("imageSize");
        if (imageSizeElem)
        {
          var imgSize = nsPreferences.getLocalizedUnicharPref(kPrefImageSize);
          var imgSizeNum = parseInt(imgSize);
          if (isNaN(imgSizeNum) || imgSizeNum <= 0)
          {
            imgSize = kDefaultImageSize;
            imgSizeNum = parseInt(imgSize);
          }

          var menuList = document.getElementById("imageSizeUnitsMenuList");
          if (menuList)
          {
            if ('%' == imgSize.charAt(imgSize.length - 1))
              menuList.selectedIndex = 0;
            else
              menuList.selectedIndex = 1;
          }

          imageSizeElem.value = imgSizeNum;
        }

        if (!kHaveImageFormatOptions)
        {
          var groupBoxElem = document.getElementById("imageFormat-groupbox");
          if (groupBoxElem)
            groupBoxElem.hidden = true;
        }
        else
        {
          var formatElem = document.getElementById("imageFormat");
          if (formatElem)
          {
            var elemName = "imageFormat-" + gCurrentImageFormat;
            var selectedElem = document.getElementById(elemName);
            if (selectedElem)
              formatElem.selectedItem = selectedElem;
          }

          var pngTransElem = document.getElementById("png-transparency");
          if (pngTransElem)
          {
            var prefName = PageSaverGetImageOptionsPrefName(kPearlContentTypePNG);
            var pngOptions = nsPreferences.getLocalizedUnicharPref(prefName,
                                                      kPNGOptionsDefaultValue);
            pngTransElem.checked = !(pngOptions == kPNGOptionNoTransparency);
          }

          var jpegQualityElem = document.getElementById("jpeg-quality");
          if (jpegQualityElem)
          {
            var jpegQuality = kJPEGDefaultQuality;
            var prefName = PageSaverGetImageOptionsPrefName(kPearlContentTypeJPEG);
            var jpegOptions = nsPreferences.getLocalizedUnicharPref(prefName,
                                                                    "");
            if (0 == jpegOptions.indexOf(kJPEGOptionQualityPrefix))
            {
              var qualityNum = parseInt(jpegOptions.substr(
                                              kJPEGOptionQualityPrefix.length));
              if (!isNaN(imgSizeNum) && qualityNum >= 0 && qualityNum <= 100)
                jpegQuality = qualityNum;
            }
            jpegQualityElem.value = jpegQuality;
          }
        }

        if (PageSaverIsFlashWModeOverrideHelpful())
        {
          var id = "arrangeToCaptureFlash";
          var captureFlashElem = document.getElementById(id);
          if (captureFlashElem)
          {
            captureFlashElem.removeAttribute("hidden");
            var sepElem = document.getElementById(id + "-sep");
            if (sepElem)
              sepElem.removeAttribute("hidden");
            setCheckboxFromPref(id, kPrefFlashArrangeToCapture, false);
          }
        }
          
        setCheckboxFromPref("playSound", kPrefPlaySoundOnCapture, true);
        setCheckboxFromPref("showContextItemVisible",
                            kPrefShowContextItemVisible, false);
        setCheckboxFromPref("showContextItemEntire",
                            kPrefShowContextItemEntire, false);
        setCheckboxFromPref("showContextItemFrame",
                            kPrefShowContextItemFrame, false);

        gPrimaryShortCut.key = nsPreferences.getLocalizedUnicharPref(kPrefKey, "");
        gPrimaryShortCut.modifiers = nsPreferences
               .getLocalizedUnicharPref(kPrefKey + kModifierKeyPrefSuffix, "");
        gPrimaryShortCut.friendly = nsPreferences
               .getLocalizedUnicharPref(kPrefKey + kFriendlyKeyPrefSuffix, "");

        var keyElem = document.getElementById("shortCutKey");
        if (keyElem)
          keyElem.value = gPrimaryShortCut.friendly;



      }

      function setCheckboxFromPref(aID, aPrefName, aDefaultVal)
      {
        var e = document.getElementById(aID);
        if (e)
          e.checked = nsPreferences.getBoolPref(aPrefName, aDefaultVal);
      }

      function setPrefFromCheckbox(aID, aPrefName, aDefaultVal)
      {
        var e = document.getElementById(aID);
        nsPreferences.setBoolPref(aPrefName, (e) ? e.checked : aDefaultVal);
      }

      function addLegend(aParentElemID)
      {
        var parentElem = document.getElementById(aParentElemID);
        if (!parentElem)
          return;

        var descriptionElems = parentElem.getElementsByTagName("description");
        for (var i = descriptionElems.length - 1; i >= 0; --i)
        {
          var descElem = descriptionElems.item(i);
          var propName = descElem.getAttribute("pageSaverProp");
          if (propName)
          {
            var pattern = descElem.getAttribute("pageSaverPattern");
            var s = GetFormattedLocalizedString(propName, [pattern], 1);
            descElem.appendChild(document.createTextNode(s));
          }
        }
      }

      function setElementWidthToContainer(aContainerID, aID)
      {
        var containerElem = document.getElementById(aContainerID);
        var elem = document.getElementById(aID);
        if (containerElem && elem)
        {
          elem.width = containerElem.boxObject.x + containerElem.boxObject.width
                       - elem.boxObject.x;
        }
      }


      function onCancelButton() { window.close(); }

      function onOKButton()
      {
        var elem = document.getElementById("fileName");
        var filename = (elem && elem.value) ? elem.value : kFileNameDefaultValue;
        nsPreferences.setUnicharPref(kPrefFileName, filename);

        setPrefFromCheckbox("promptBeforeSaving", kPrefFileDoPrompt, true);
        setPrefFromCheckbox("overwriteFile", kPrefFileOverwrite, false);

        var imgSize = document.getElementById("imageSize").value;
        var imgSizeNum = parseInt(imgSize);
        if (isNaN(imgSizeNum) || imgSizeNum <= 0)
          nsPreferences.setUnicharPref(kPrefImageSize, "");
        else
        {
          var valueToSet = imgSizeNum;
          var menuList = document.getElementById("imageSizeUnitsMenuList");
          if (menuList && 0 == menuList.selectedIndex
             || (imgSize.length > 0 && '%' == imgSize.charAt(imgSize.length-1)))
          {
            valueToSet += '%';
          }
          nsPreferences.setUnicharPref(kPrefImageSize, valueToSet);
        }

        if (kHaveImageFormatOptions)
        {
          elem = document.getElementById("imageFormat").selectedItem;
          if (elem)
            nsPreferences.setUnicharPref(kPrefImageFormat, elem.value);

          elem = document.getElementById("png-transparency");
          if (elem)
          {
            var pngOptions = elem.checked ? "" : kPNGOptionNoTransparency;
            var prefName = PageSaverGetImageOptionsPrefName(kPearlContentTypePNG);
            nsPreferences.setUnicharPref(prefName, pngOptions);
          }

          var jpegQualityElem = document.getElementById("jpeg-quality");
          if (jpegQualityElem)
          {
            var prefName = PageSaverGetImageOptionsPrefName(kPearlContentTypeJPEG);
            var jpegQuality = parseInt(jpegQualityElem.value);
            var jpegOptions = "";
            if (!isNaN(jpegQuality) && jpegQuality >= 0 && jpegQuality <= 100)
              jpegOptions = kJPEGOptionQualityPrefix + jpegQuality;
            nsPreferences.setUnicharPref(prefName, jpegOptions);
          }
        }

        var areaElem = document.getElementById("savedarea").selectedItem;
        nsPreferences.setIntPref(kPrefPortion, areaElem.value);



        if (PageSaverIsFlashWModeOverrideHelpful())
        {
          setPrefFromCheckbox("arrangeToCaptureFlash",
                              kPrefFlashArrangeToCapture, false);
        }
        setPrefFromCheckbox("playSound", kPrefPlaySoundOnCapture, true);
        setPrefFromCheckbox("showContextItemVisible",
                            kPrefShowContextItemVisible, true);
        setPrefFromCheckbox("showContextItemEntire",
                            kPrefShowContextItemEntire, true);
        setPrefFromCheckbox("showContextItemFrame",
                            kPrefShowContextItemFrame, true);

        nsPreferences.setUnicharPref(kPrefKey, gPrimaryShortCut.key);
        nsPreferences.setUnicharPref(kPrefKey + kModifierKeyPrefSuffix,
                                     gPrimaryShortCut.modifiers);
        nsPreferences.setUnicharPref(kPrefKey + kFriendlyKeyPrefSuffix,
                                     gPrimaryShortCut.friendly);


        window.close();
      }

      function onImageSizeKeypress(aEvent)
      {
        // Suppress characters other than digits.
        if (aEvent.charCode < aEvent.DOM_VK_0
              || aEvent.charCode > aEvent.DOM_VK_9)
        {
          // TODO: backspace, ctrl-A, etc. are also suppressed, so for now
          //       the next two lines are commented out.
//          aEvent.preventDefault();
//          aEvent.stopPropagation();
        }
      }

      function onShortCutKeyKeypress(aTextElem, aShortCutObject, aEvent)
      {
        // Keep default behavior for <Tab>, <Shift+Tab>, <Enter>, and <Return>.
        if (!aEvent.altKey && !aEvent.ctrlKey && !aEvent.metaKey &&
           (aEvent.keyCode == aEvent.DOM_VK_TAB || (!aEvent.shift &&
                                   (aEvent.keyCode == aEvent.DOM_VK_ENTER ||
                                    aEvent.keyCode == aEvent.DOM_VK_RETURN))))
        {
          return;
        }

        aShortCutObject.modifiers = "";
        aShortCutObject.friendly = "";
        aShortCutObject.key = "";

        // <BackSpace>, <Delete>, and <Escape> clear the keyboard shortcut.
        if (aEvent.keyCode == aEvent.DOM_VK_BACK_SPACE ||
            aEvent.keyCode == aEvent.DOM_VK_DELETE ||
            aEvent.keyCode == aEvent.DOM_VK_ESCAPE)
        {
          aTextElem.value = "";  // No shortcut key.
        }
        else
        {
          var newValue = "";
          var modSeparator = KeyCodeToDisplayString("MODIFIER_SEPARATOR");
          var modifiers = "";
          var modifiersPrefValue = "";
          if (aEvent.altKey)
          {
            modifiers += KeyCodeToDisplayString("VK_ALT") + modSeparator;
            modifiersPrefValue += "alt,";
          }
          if (aEvent.ctrlKey)
          {
            modifiers += KeyCodeToDisplayString("VK_CONTROL") + modSeparator;
            modifiersPrefValue += "control,";
          }
          if (aEvent.metaKey)
          {
            modifiers += KeyCodeToDisplayString("VK_META") + modSeparator;
            modifiersPrefValue += "accel,";
          }
          if (aEvent.shiftKey)
          {
            modifiers += KeyCodeToDisplayString("VK_SHIFT") + modSeparator;
            modifiersPrefValue += "shift,";
          }
          var len = modifiersPrefValue.length;
          if (len > 0)
            modifiersPrefValue = modifiersPrefValue.substr(0, len - 1);

          if (aEvent.charCode > 0)
          {
            if (aEvent.altKey || aEvent.ctrlKey || aEvent.metaKey)
            {
              aShortCutObject.modifiers = modifiersPrefValue;
              var upperkey = String.fromCharCode(aEvent.charCode).toUpperCase();
              aShortCutObject.key = upperkey;
              newValue = modifiers + upperkey;
            }
          }
          else if (aEvent.keyCode > 0)
          {
            var vkString = DOMVKToString(aEvent.keyCode);
            if (vkString)
            {
              var displayString = KeyCodeToDisplayString(vkString);
              if (displayString)
              {
                newValue = modifiers + displayString;
                aShortCutObject.key = vkString;
                aShortCutObject.modifiers = modifiersPrefValue;
              }
            }
          }
          aTextElem.value = newValue;
          aShortCutObject.friendly = newValue;
        }

        aEvent.preventDefault();
        aEvent.stopPropagation();
      }

      function onShortCutKeyInput(aTextElem, aShortCutObject)
      {
        aTextElem.value = aShortCutObject.friendly;
      }

      function onFormattedTextInput(aTextElem)
      {
        var sampleID = aTextElem.getAttribute("pageSaverSample");
        var sampleElem = sampleID ? document.getElementById(sampleID) : null;
        if (sampleElem)
        {
          var isFile = aTextElem.hasAttribute("pageSaverIsFile");
          var pattern = aTextElem.value;
          if (!pattern && isFile)
            pattern = kFileNameDefaultValue;
// brade: PERFORMANCE (anything we can do to optimize this?)
          var s = PageSaverFormatText(pattern, kSamplePageURL,
                                      kSamplePageTitle, kSampleID, isFile);
          if (isFile)
            s += PageSaverGetFileExtension(gCurrentImageFormat);
          sampleElem.value = s;
        }
      }

      function onPromptCheckboxChange(aEvent /* not used */)
      {
        var promptElem = document.getElementById("promptBeforeSaving");
        if (!promptElem) return;
        var overwriteElem = document.getElementById("overwriteFile");
        if (!overwriteElem) return;

        if (promptElem.checked)
          overwriteElem.setAttribute("disabled", true);
        else
          overwriteElem.removeAttribute("disabled");
      }

      function onImageFormatChange(aEvent /* not used */)
      {
        elem = document.getElementById("imageFormat").selectedItem;
        if (elem)
        {
          gCurrentImageFormat = elem.value;
          var fileNameElem = document.getElementById("fileName");
          if (fileNameElem)
            onFormattedTextInput(fileNameElem);
        }
      }
    ]]>
  </script>

  <keyset id="dialogKeys" />

  <tabbox>
    <tabs>
      <tab label="&PageSaverGeneralTab.label;"/>
      <tab label="&PageSaverCaptureTab.label;"/>
    </tabs>
    <tabpanels>
      <tabpanel id="general-tab" orient="vertical">
        <groupbox>
          <caption label="&PageSaverPrefsSavedPortionGroup.label;"/>
            <radiogroup id="savedarea">
              <radio id="savedarea-visible" value="0"
                     label="&PageSaverSaveVisibleArea.label;"
                     tooltiptext="&PageSaverSaveVisibleArea.tooltip;"/>
              <radio id="savedarea-entire" value="1"
                     label="&PageSaverSaveEntireArea.label;"
                     tooltiptext="&PageSaverSaveEntireArea.tooltip;"/>
            </radiogroup>
        </groupbox>
        <separator class="thin"/>
        <groupbox>
          <caption label="&PageSaverShortcuts.label;"/>
          <description>&PageSaverShortCutInstruction.label;</description>
          <hbox>
            <groupbox>
              <caption label="&PageSaverShortCutKey.label;"/>
              <textbox id="shortCutKey" size="20"
                       onkeypress="onShortCutKeyKeypress(this, gPrimaryShortCut, event);"
                       oninput="onShortCutKeyInput(this, gPrimaryShortCut);"
                       tooltiptext="&PageSaverShortCut.tooltip;"/>
            </groupbox>
          </hbox>
          <description class="PageSaverBold">&PageSaverShortCutReminder.label;</description>
        </groupbox>
        <separator class="thin"/>
        <groupbox>
          <caption label="&PageSaverShowContextMenuItemsFor.label;"
                   tooltiptext="&PageSaverShowContextMenuItemsFor.tooltip;" />
          <grid><columns><column/><column/><column/></columns>
            <rows><row>
              <checkbox id="showContextItemVisible"
                        label="&PageSaverSaveVisibleArea.label;" />
              <spacer style="width: 25px" />
              <checkbox id="showContextItemFrame"
                        label="&PageSaverSaveEntireFrame.label;" />
            </row><row>
              <checkbox id="showContextItemEntire"
                        label="&PageSaverSaveEntireArea.label;" />
              <spacer/>
              <spacer/>
            </row></rows>
          </grid>
        </groupbox>
      </tabpanel><!-- General -->

      <tabpanel orient="vertical">
        <groupbox>
          <caption label="&PageSaverDestFile.label;" />
          <grid>
            <columns><column/><column/></columns>
            <rows>
              <row align="center" id="fileName-row">
                <label control="fileName"
                       tooltiptext="&PageSaverFileNamePref.tooltip;">&PageSaverFileNamePref.label;</label>
                <hbox>
                  <textbox id="fileName" size="20" pageSaverIsFile="true"
                           pageSaverSample="fileName-sample"
                           tooltiptext="&PageSaverFileNamePref.tooltip;"
                           oninput="onFormattedTextInput(this);" />
                  <spacer/>
                </hbox>
              </row>
              <row>
                <label>&PageSaverExample.label;</label>
                <label id="fileName-sample" crop="end" disabled="true" />
              </row>
            </rows>
          </grid>

          <grid id="fileName-legend" class="legend" flex="1">
            <rows>
              <row align="center"/><row align="center"/><row align="center"/>
            </rows>
            <columns>
              <column>
                <spacer/>
                <spacer/>
                <spacer/>
              </column>
              <column>
                <description pageSaverPattern="%t"
                             pageSaverProp="PREF_FILE_LEGEND_TITLE" />
                <description pageSaverPattern="%u"
                             pageSaverProp="PREF_FILE_LEGEND_URL" />
                <description pageSaverPattern="%5"
                             pageSaverProp="PREF_FILE_LEGEND_MD5HASH" />
              </column>
              <column>
                <description pageSaverPattern="%Y"
                             pageSaverProp="PREF_FILE_LEGEND_YEAR" />
                <description pageSaverPattern="%m"
                             pageSaverProp="PREF_FILE_LEGEND_MONTH" />
                <description pageSaverPattern="%d"
                             pageSaverProp="PREF_FILE_LEGEND_DAY" />
              </column>
              <column>
                <description pageSaverPattern="%H"
                             pageSaverProp="PREF_FILE_LEGEND_HOUR" />
                <description pageSaverPattern="%M"
                             pageSaverProp="PREF_FILE_LEGEND_MINUTE" />
                <description pageSaverPattern="%S"
                             pageSaverProp="PREF_FILE_LEGEND_SECOND" />
              </column>
            </columns>
          </grid>

          <separator class="thin"/>
          <checkbox id="promptBeforeSaving"
                    label="&PageSaverPromptBeforePref.label;"
                    tooltiptext="&PageSaverPromptBeforePref.tooltip;" />
          <checkbox id="overwriteFile"
                    label="&PageSaverOverwriteFilePref.label;"
                    tooltiptext="&PageSaverOverwriteFilePref.tooltip;" />
        </groupbox>
        <separator class="thin" />
        <groupbox>
          <caption label="&PageSaverImageSizePref.label;"
                   tooltiptext="&PageSaverImageSizePref.tooltip;" />
          <hbox align="center">
            <textbox id="imageSize" size="4"
                     onkeypress="onImageSizeKeypress(event);"
                     tooltiptext="&PageSaverImageSizePref.tooltip;"/>
            <menulist id="imageSizeUnitsMenuList">
              <menupopup>
                <menuitem value="%" label="&PageSaverImageSizeUnitsPercent.label;"/>
                <menuitem value=""  label="&PageSaverImageSizeUnitsPixels.label;"/>
              </menupopup>
            </menulist>
          </hbox>
        </groupbox>
        <groupbox id="imageFormat-groupbox">
          <caption label="&PageSaverImageFormatMenu.label;"/>
          <radiogroup id="imageFormat" onselect="onImageFormatChange();">
            <hbox>
              <radio id="imageFormat-image/png" value="image/png"
                     label="&PageSaverImageFormatPNG.label;"
                     tooltiptext="&PageSaverImageFormatPNG.tooltip;"/>
              <spacer style="width: 12px;" />
              <checkbox id="png-transparency"
                        label="&PNGTransparencyPref.label;"
                        tooltiptext="&PNGTransparencyPref.tooltip;" />
            </hbox>
            <hbox align="center">
              <radio id="imageFormat-image/jpeg" value="image/jpeg"
                     label="&PageSaverImageFormatJPEG.label;"
                     tooltiptext="&PageSaverImageFormatJPEG.tooltip;"/>
              <spacer style="width: 12px;" />
              <label control="jpeg-quality">&PageSaverJPEGQualityPref.label;</label>
              <textbox id="jpeg-quality" size="4"
                       tooltiptext="&PageSaverJPEGQualityPref.tooltip;"/>
            </hbox>
          </radiogroup>
        </groupbox>

        <separator id="arrangeToCaptureFlash-sep" class="thin" hidden="true" />
        <checkbox id="arrangeToCaptureFlash" hidden="true"
                  label="&PageSaverArrangeToCaptureFlash.label;"
                  tooltiptext="&PageSaverArrangeToCaptureFlash.tooltip;" />

        <separator class="thin"/>
        <checkbox id="playSound"
                  label="&PageSaverPlaySound.label;"
                  tooltiptext="&PageSaverPlaySound.tooltip;" />
      </tabpanel><!-- Image Capture -->



    </tabpanels>
  </tabbox>

  <separator class="thin"/>
  <hbox id="okCancelButtonsRight" />
  <separator class="thin"/>
</window>
